import pandas as pd
import numpy as np

from .A01_toolbox import moving_average

class temp_sensor:
    def __init__(self, file:str, moving_avg_second=0.1, environment_temp=23.5):
        self.time = None
        self.temp = None

        df = pd.read_csv(file, sep=',', engine='python', skiprows=10, encoding='shift_jis', header=0)
        df_subset = df.iloc[:, :2]
        df_subset.columns = ['A', 'B']
        self.time = df_subset['A'].to_numpy()
        self.temp = df_subset['B'].to_numpy()
        self.d_time = self.time[1] - self.time[0]
        
        self.procession(moving_avg_second)
        self.check_zero()
        self.calibration(environment_temp)
    
    def procession(self,window_size_in_second):
        window_size = int(window_size_in_second/self.d_time)
        
        self.time = moving_average(self.time, window_size)
        self.temp = moving_average(self.temp, window_size)
        
    def check_zero(self):
        index = np.nanargmax(self.temp)
        zerotime = self.time[index]
        self.time = self.time - zerotime

    def calibration(self, environment_temp):
        index = np.where(~np.isnan(self.temp))[0][0]
        d_temp = self.temp[index] - environment_temp
        self.temp = self.temp - d_temp
        pass

class press_sensor_PSE540:
    def __init__(self, file:str, col=1, samplerate = 5000):
        self.samplerate = samplerate
        self.time = None
        self.press = None
        self.zero = None
        
        df = pd.read_csv(file, sep=',\s*', engine='python', skiprows=16)   
        df_subset = df.iloc[:, [col]]
        df_subset.columns = ['A']
        self.time = np.array([1.0/samplerate*i for i in range(len(df_subset['A'].to_numpy()))])       
        self.convertandsmooth(df_subset['A'].to_numpy())
        self.check_zero()

    def convertandsmooth(self, data, moving_avg_seconds = 0.1, avg_zero_seconds=0.5):
        def __moving_average(data, window_size):
            return np.convolve(data, np.ones(window_size) / window_size, mode='valid')
        window_size = int(moving_avg_seconds*self.samplerate)
        zero_size = int(avg_zero_seconds*self.samplerate)

        data = (data-1.0)*250.0
        zero = np.nanmean(data[0:zero_size])
        self.time = __moving_average(self.time, window_size)
        self.press = __moving_average(data, window_size) - zero

        return
    
    def check_zero(self):
        level = np.abs(self.press[:int(len(self.press)/2)] - 100)
        max_index = np.argmin(level)
        self.time = self.time - self.time[max_index]

class press_sensor_PSE543:
    def __init__(self, file:str, col=1, samplerate = 5000, zero_pos = 0):
        self.samplerate = samplerate
        self.time = None
        self.press = None
        self.zero = None
        
        df = pd.read_csv(file, sep=',\s*', engine='python', skiprows=16)   
        df_subset = df.iloc[:, [col]]
        df_subset.columns = ['A']
        self.time = np.array([1.0/samplerate*i for i in range(len(df_subset['A'].to_numpy()))])       
        self.convertandsmooth(df_subset['A'].to_numpy())
        self.check_zero(zero_pos)

    def convertandsmooth(self, data, moving_avg_seconds = 0.1, avg_zero_seconds=0.5):
        def __moving_average(data, window_size):
            return np.convolve(data, np.ones(window_size) / window_size, mode='valid')
        window_size = int(moving_avg_seconds*self.samplerate)
        zero_size = int(avg_zero_seconds*self.samplerate)

        data = (data-3.0)*50.0
        zero = np.nanmean(data[0:zero_size])
        self.time = __moving_average(self.time, window_size)
        self.press = __moving_average(data, window_size) - zero
        return
    
    def check_zero(self,zero_pos):
        self.time = self.time - zero_pos



        
    
