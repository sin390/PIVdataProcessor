''' 
=========================
= Author:   HAN Zexu    =
= Version:  1.2         =
= Date:     2025/06/10  =
=========================
'''

import matplotlib.pyplot as plt
import matplotlib.axes._axes
import matplotlib.ticker as ticker
import numpy as np
import os
import inspect
from pivdataprocessor.L01_base import PIVDataProcessorBase as pBase


mycolors = ['#d62728', '#1f77b4', '#2ca02c', '#ff7f0e', '#9467bd', '#8c564b', '#e377c2']

def quickset():
    plt.rcParams.update({
    'text.usetex': True,
    'font.family': 'serif',
    'font.serif': ['Computer Modern'], 
    'font.size': 12,

    'lines.linewidth': 1.0,

    'figure.dpi': 300,
    'savefig.dpi': 600,

    'axes.linewidth': 0.8,
    'axes.labelsize': 12,
    'axes.titlesize': 12,

    'xtick.labelsize': 10,
    'ytick.labelsize': 10, 
    'xtick.top': True,
    'xtick.bottom': True,
    'ytick.left': True,
    'ytick.right': True,
    'xtick.direction': 'in',
    'ytick.direction': 'in',

    'xtick.major.size': 4,
    'ytick.major.size': 4,
    'xtick.major.width': 0.8,
    'ytick.major.width': 0.8,

    'xtick.minor.visible': True,
    'ytick.minor.visible': True,
    'xtick.minor.top': True,
    'xtick.minor.bottom': True,
    'ytick.minor.left': True,
    'ytick.minor.right': True,
    'xtick.minor.size': 2,
    'ytick.minor.size': 2,
    'xtick.minor.width': 0.6,
    'ytick.minor.width': 0.6,


    'legend.fontsize': 11,
    'legend.loc': 'upper right',
    'legend.frameon': False,
    'legend.facecolor': 'none',
    'legend.edgecolor': 'none'    
    })

def generatefiglist(fignumbers, subfig_cow_number, subfig_rol_number, figsize):
    figs = []
    axess = []
    for _ in range(fignumbers):
        fig, axes = plt.subplots(subfig_cow_number, subfig_rol_number, figsize=figsize) 
        figs.append(fig)
        if isinstance(axes, np.ndarray):
            axess.append(list(axes.ravel()))
        else:
            axess.append([axes])
    return figs,axess



class myaxconfig():
    def __init__(self, ax: matplotlib.axes._axes.Axes):
        self.ax = ax
        self.xlim = None
        self.ylim = None
        self.xticks = None
        self.yticks = None
        self.xlable = None
        self.ylable = None
        self.grid = False
        self.title = None
        self.tick_minor = 2

    def apply(self):
        if self.xlim is not None:
            self.ax.set_xlim(self.xlim)
        if self.ylim is not None:
            self.ax.set_ylim(self.ylim)
        if self.xticks is not None:
            self.ax.set_xticks(self.xticks)
        if self.yticks is not None:
            self.ax.set_yticks(self.yticks)
        if self.xlable is not None:
            self.ax.set_xlabel(self.xlable)
        if self.ylable is not None:
            self.ax.set_ylabel(self.ylable)
        if self.grid:
            self.ax.grid(self.grid)
        if self.title is not None:
            self.ax.set_title(self.title)
        if self.tick_minor is not None:
            self.ax.xaxis.set_minor_locator(ticker.AutoMinorLocator(self.tick_minor))
            self.ax.yaxis.set_minor_locator(ticker.AutoMinorLocator(self.tick_minor))
        

def getplotpath() -> str:
    frame = inspect.stack()[1]
    module = inspect.getmodule(frame[0])
    current_file_path = os.path.abspath(module.__file__)
    c_file_path, c_file_name = os.path.split(current_file_path) 

    cwd = pBase.Paths.Working_path
    c_relative_path = os.path.relpath(c_file_path, start=cwd)
    
    plot_path = cwd + pBase.Paths.Plot_foldername + '/' + c_relative_path + '/' + c_file_name[:-3]
    if not os.path.exists(plot_path):
        os.makedirs(plot_path)
    return plot_path


