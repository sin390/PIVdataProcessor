''' 
=========================
= Author:   HAN Zexu    =
= Version:  1.0         =
= Date:     2025/04/09  =
=========================
'''

import numpy as np
from .L01_base import PIVDataProcessorBase as pBase
from .A01_toolbox import float_precsion
import os, inspect, shutil, sys
from dataclasses import dataclass, asdict, fields
import yaml

class PIVDataProcessorExtensionTemplate(pBase):
    def __init__(self, casename:str):
        super().__init__()
        pBase.load_case(casename=casename)
        self.casename = pBase.CaseInfo.CaseName
        self.result_path  = self.__getpath() + '/' + self.casename
    
    def __getpath(self) -> str:
        frame = inspect.stack()[2]
        module = inspect.getmodule(frame[0])
        current_file_path = os.path.abspath(module.__file__)
        c_file_path, c_file_name = os.path.split(current_file_path) 
        cwd = pBase.Paths.Working_path
        c_relative_path = os.path.relpath(c_file_path, start=cwd)
        plot_path = cwd + pBase.Paths.Plot_foldername + '/' + c_relative_path + '/' + c_file_name[:-3]
        return plot_path
    
    def report(self, str:str):
        self.pBasereport(str, self.result_path + '/log.txt')

class GeneralTemplate():
    def __init__(self, result_path_name = '00_Results', if_save_in_S02:bool = True):
        self.result_path = self.__getpath() + '/' + result_path_name

    def __getpath(self) -> str:
        frame = inspect.stack()[2]
        module = inspect.getmodule(frame[0])
        current_file_path = os.path.abspath(module.__file__)
        c_file_path, c_file_name = os.path.split(current_file_path) 
        return c_file_path    

    @classmethod    
    def rm_and_create_directory(cls, path_to_directory:str) -> None:
        if os.path.exists(path_to_directory):
            shutil.rmtree(path_to_directory)
        os.makedirs(path_to_directory)     
 
    def GTreport(self, str:str = '', logfile:str = '', ifinit = False) -> None:
        '''
            Custom print().

            No need to pay extra attention.
        '''
        if logfile == '':
            logfile = self.result_path+'/log.txt'
        else:
            logfile = self.result_path + logfile
        if ifinit == True:
            with open(logfile,'w') as f:
                sys.stdout = f
                print(str)
        else:
            with open(logfile,'a') as f:
                sys.stdout = f
                print(str)            
        sys.stdout = sys.__stdout__

    @classmethod
    def save_nparray_to_bin(cls, quantity:np.ndarray, datapath:str):
        with open(datapath, 'wb') as f:
            quantity.tofile(f)  

    @classmethod
    def load_nparray_from_bin(cls, quantity: np.ndarray, datapath:str, dtype=float_precsion) -> np.ndarray:
        shape = quantity.shape
        quantity = np.fromfile(datapath, dtype = dtype).reshape(shape)
        return quantity
    

    